(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{389:function(s,t,a){"use strict";a.r(t);var e=a(45),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"es6知识汇总"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6知识汇总"}},[s._v("#")]),s._v(" es6知识汇总：")]),s._v(" "),a("p",[s._v("阮一峰ES6: https://es6.ruanyifeng.com")]),s._v(" "),a("p",[s._v("知识点的3w1h: what(这是啥?), where(哪里用?), why(为什么要用?), how(怎么用?)")]),s._v(" "),a("p",[s._v("[TOC]")]),s._v(" "),a("h2",{attrs:{id:"_1-let和const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-let和const"}},[s._v("#")]),s._v(" 1. let和const")]),s._v(" "),a("h3",{attrs:{id:"_1-let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-let"}},[s._v("#")]),s._v(" 1. let")]),s._v(" "),a("p",[s._v("let是es6新增的功能,用来声明变量.\nvar和let声明变量有什么区别?")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("1. 作用域不同,var声明的是函数作用域,let声明的是块级作用域\n2. var具有变量声明提升,let没有变量声明提升;所以对于let变量的使用原则是:先声明后使用\n3. var在同一作用域可以重复声明,后面的变量会覆盖前面的变量;let不可以,会报错\n4. 什么是暂时性死区?\n - 暂时性死区(TDZ),let在当前作用域声明变量后,会绑定当前作用域;不能继续重复声明变量\n - 违反先声明后使用的原则或同一作用域重复声明变量的原则就会有暂时性死区的错误出现(注意:这是针对let的,var没有暂时性死区)\n")])])]),a("p",[s._v("注意:")]),s._v(" "),a("p",[s._v("​\t\tfor循环的特殊之处:")]),s._v(" "),a("p",[s._v("​\t\t\t1.  JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算")]),s._v(" "),a("p",[s._v("​\t\t\t2. 设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。")]),s._v(" "),a("h3",{attrs:{id:"_2-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-const"}},[s._v("#")]),s._v(" 2.const")]),s._v(" "),a("p",[s._v("const是ES6新增的用于声明常量的关键字")]),s._v(" "),a("p",[s._v("const常量的特点:")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("const常量声明的时候需要赋值,否则报错")])]),s._v(" "),a("li",[a("p",[s._v("初始化之后不允许再次赋值,否则报错")])]),s._v(" "),a("li",[a("p",[s._v("目前在es6中使用const修饰的数组或对象,他们内部的元素可以被修改")]),s._v(" "),a("p",[s._v("比如:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3.cosnt声明数组或对象类型常量问题")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'李四'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// names = 1;//报错,常量不能再次赋值;//const修饰的是names,并不是names数组中包含的集合内容,所以数组里面的元素是可以修改的")]),s._v("\n        names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王五'")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//['王五','李四']")]),s._v("\n\n        student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//{name:'张三',age:18}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("const声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用(先声明后使用)。")])])]),s._v(" "),a("li",[a("p",[s._v("const也是块级作用域.")]),s._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[s._v("const使用场景")])])]),s._v(" "),a("li",[a("p",[s._v("多人开发环境,使用const来修饰公共的模块,不希望同事修改")])]),s._v(" "),a("li",[a("p",[s._v("数学中Math.PI(3.14圆周率),如果被修改后面使用到的PI计算出来的数字不准确了")])])]),s._v(" "),a("h3",{attrs:{id:"_3-顶层对象的绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-顶层对象的绑定"}},[s._v("#")]),s._v(" 3.顶层对象的绑定")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("javascript的顶层对象是window;使用var声明的变量或函数，会绑定到顶层对象window上")])]),s._v(" "),a("li",[a("p",[s._v("ES6中的let和const声明的全局变量不再绑定window，var声明的全局变量会绑定window")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  javascript的顶层对象是window;使用var声明的变量或函数，会绑定到顶层对象window上")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" apple "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"苹果"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("getApple")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"打印苹果"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//苹果,绑定到顶层对象window上了")]),s._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getApple")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//打印苹果")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let声明的全局变量不会绑定到window上")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// let apple = "苹果";')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let getApple = function() {")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//   console.log("打印苹果");')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// };")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(window.apple);//undefined")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(window.getApple);//undefined")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 小结：ES6中的let声明的全局变量不再绑定window，var声明的全局变量会绑定window")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])])]),s._v(" "),a("p",[s._v("​")]),s._v(" "),a("h2",{attrs:{id:"_2-变量的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量的解构赋值"}},[s._v("#")]),s._v(" 2. 变量的解构赋值")]),s._v(" "),a("h3",{attrs:{id:"_0-什么是解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-什么是解构赋值"}},[s._v("#")]),s._v(" 0. 什么是解构赋值?")]),s._v(" "),a("ul",[a("li",[s._v("ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。")])]),s._v(" "),a("p",[s._v("注解:    解构赋值根据 "),a("strong",[s._v("赋值运算符")]),s._v(" 左右来划分,赋值运算符"),a("strong",[s._v("左边的是模式和变量声明")]),s._v(",赋值运算符"),a("strong",[s._v("右面的是要解构的数组和对象")]),s._v(";所以如何识别解构赋值(不应该把解构赋值想象成数组或对象),关键在于赋值运算符.以[]或{}出现在赋值运算符左边,一定是解构赋值(模式),反之右边一定是数组或对象.")]),s._v(" "),a("h3",{attrs:{id:"_1-数组的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组的解构赋值"}},[s._v("#")]),s._v(" 1.数组的解构赋值")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("数组解构赋值是讲究次序的,比如:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'李四'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王五'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'赵六'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {zhangsan}=names;//使用形式错误,模式不匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {0:zhangsan}=names;//由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(zhangsan);//张三")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let [zhangsan,lisi,wangwu,zhaoliu]= names;//声明了zhangsan,lisi,wangwu,zhaoliu 这四个便量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(zhangsan,lisi,wangwu,zhaoliu);")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //带逗号的情况,属于不完全解构")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let [,,,zhaoliu]=names;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(zhaoliu);//赵六")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let [,lisi]=names;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(lisi);")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let [,lisi,,zhaoliu]=names;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(lisi,zhaoliu);")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-对象的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象的解构赋值"}},[s._v("#")]),s._v(" 2.对象的解构赋值")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("注意事项:  对象解构赋值的时候要注意key(属性名)也是作为模式存在的;")])]),s._v(" "),a("li",[a("p",[s._v("简写形式下有俩层含义:")]),s._v(" "),a("ol",[a("li",[s._v("它是对象解构匹配模式,")]),s._v(" "),a("li",[s._v("它是要声明的变量名字")])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("address"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'北京'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {age:myage} = student; //age是对象匹配模式,myage是变量名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(myage);")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {name:newName,address:newAddress,age:newAge}=student;//声明了三个变量,分别是newName,newAddress,newAge")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(newName,newAddress,newAge);")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {name:name}=student;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(name);")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//上述形式可以简写为:(简写后的name有俩层含义: 1.它是对象解构匹配模式, 2.它是要声明的变量名字)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let{name}=student;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(name);")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {name,address,age} = student;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(name,address,age);")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"_3-解构赋值默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-解构赋值默认值"}},[s._v("#")]),s._v(" 3.解构赋值默认值")]),s._v(" "),a("p",[s._v("注意:  ES6 内部使用严格相等运算符（"),a("code",[s._v("===")]),s._v("），判断一个位置是否有值。所以，只有当一个数组成员严格等于"),a("code",[s._v("undefined")]),s._v("，默认值才会生效。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-函数形参的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-函数形参的解构赋值"}},[s._v("#")]),s._v(" 4.函数形参的解构赋值")]),s._v(" "),a("ul",[a("li",[s._v("什么时候用函数形参解构赋值\n"),a("ul",[a("li",[s._v("因为函数调用的时候,实参和形参要保证数量和顺序的一致性,所以当参数比较多的时候,这个顺序和数量就很麻烦;这种情况就可以使用函数形参解构赋值来解决:\n1. 使用对象解构赋值可以解决参数的顺序问题\n2. 使用解构默认值可以解决参数默认值问题")])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// $.ajax({")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     url: '地址',")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     data: {")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//         参数: xxx,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//         参数: xxx")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     },")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     type: 'POST/GET',")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     success: function (str) { //成功回调函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//         alert(str);")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     },")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     error: function (err) { //失败回调函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//         alert(err);")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// });")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当函数形参比较多的时候,我们可以使用对象充当参数")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //1.此时参数众多,形参和实参的数量顺序必须一致,否则使用会出问题")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// function fn(name,age,num,address,sex){")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     console.log('我叫'+name+','+'今年'+age+'岁'+','+'我的学号是:'+num+','+'我家在'+address+','+'我是'+sex+'生。'); ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn('张三',18,'001','北京','男');")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn(12,'李四','北京','男',1)//顺序不对")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn('张三',18)//数量不对")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //2.错误的示范,默认值是对的,但是形参和实参的顺序和数量不对应")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //sex形参有一个默认值,为'男',他的生效前提和解构赋值一样,都需要实参严格等于undefined")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// function fn(name,age=21,num,address,sex='男'){")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     console.log('我叫'+name+','+'今年'+age+'岁'+','+'我的学号是:'+num+','+'我家在'+address+','+'我是'+sex+'生。'); ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn('张三','001','北京',)")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //3.此时fn的形参不是对象(注意! 注意! 注意!),他是解构赋值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// function fn({name,age=21,num,address,sex='男'}){")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     console.log('我叫'+name+','+'今年'+age+'岁'+','+'我的学号是:'+num+','+'我家在'+address+','+'我是'+sex+'生。'); ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn({")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     address:'北京',")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     name:'张三',")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     num:'001',")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     sex:'女'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// })")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// // 上面操作就相当于:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// function fn({ name, age = 21, num, address, sex = '男' } = {address: '北京',name: '张三',num: '001', sex: '女'}) {")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     console.log('我叫' + name + ',' + '今年' + age + '岁' + ',' + '我的学号是:' + num + ',' + '我家在' + address + ',' + '我是' + sex + '生。');")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //其实和对象解构赋值差不多")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {name, age = 21, num, address, sex:newSex = '男'}={address: '北京',name: '张三',num: '001', sex: '女'};")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(name ,age,newSex);")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let { name, age = 21, num, address, sex: newSex = '男' } = {};")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn({})//后面没实参,就相当于函数里面赋值的是空对象")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let { name, age = 21, num, address, sex: newSex = '男' } = undefined;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn()//这次相当于函数里面什么也没传,会报错,因为无法将undefiend转化为对象//Cannot destructure property 'name' of 'undefined' as it is undefined//无法解构“未定义”的属性")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//最终形式:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如何避免出现undefined   //结论: 检测到函数实参是undefined什么值也没传,就走函数形参默认值{}空对象,走空对象就走到了解构赋值默认值了,这样就避免报错了,而且还有解构赋值的默认值,如果函数传了实参,那么就直接走实参了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'男'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//={}代表的就是函数形参,默认空对象,避免报错,前面的{name,age}这是解构赋值")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'我叫'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'今年'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'岁'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'我的学号是:'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'我家在'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" address "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'我是'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'生。'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fn({")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     name: '小张',")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     num: 002,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     age: 23,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//     address:"北京"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// })")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br")])]),a("h3",{attrs:{id:"_5-字符串和数字布尔值的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-字符串和数字布尔值的解构赋值"}},[s._v("#")]),s._v(" 5.字符串和数字布尔值的解构赋值")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//通过解构赋值的概念,我们知道,解构赋值是针对数组或对象的;但是我们现在要处理字符串和数值,这可以吗?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以,为什么呢,因为js中一切皆对象")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let [a] = 'hello'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a);//h")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// // 类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {length} ='hello world'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(length);//11")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let {toString}=33;//把toStrign分离出来了,所以要改变this指向,指定一个调用者")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//33.toStrong//平常直接使用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(typeof toString.call(33));//string,解构赋值分离后的")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(toString);//ƒ toString() { [native code] ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let { toString: s } = 1024;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(s === Number.prototype.toString);// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let { toString: s } = true;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(s === Boolean.prototype.toString);// true")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。//无法解构“未定义”的属性")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let { prop: x } = undefined; // TypeError")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// let { prop: y } = null; // TypeError")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h2",{attrs:{id:"_3-es6的各种扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-es6的各种扩展"}},[s._v("#")]),s._v(" 3. es6的各种扩展")]),s._v(" "),a("h3",{attrs:{id:"_1-字符串的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-字符串的扩展"}},[s._v("#")]),s._v(" 1.字符串的扩展")]),s._v(" "),a("ol",[a("li",[s._v("模板字符串(掌握)\n"),a("ul",[a("li",[s._v("优点:  可以允许回车换行, 可读性好, 可维护性好; 嵌入表达式很方便, 不容易出错")])])]),s._v(" "),a("li",[s._v("标签模板(了解)\n"),a("ul",[a("li",[s._v("作用:\n"),a("ol",[a("li",[s._v("标签模板”的一个重要应用，就是过滤 HTML (标签)字符串，防止用户输入恶意内容。")]),s._v(" "),a("li",[s._v("国际化(i18n)")])])])])])]),s._v(" "),a("h3",{attrs:{id:"_2-数值的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数值的扩展"}},[s._v("#")]),s._v(" 2.数值的扩展")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Number.isFinite():  用来检测一个数值是否为有限的(finite),即不是Infinite(无穷大或无穷小-Infinite)")]),s._v(" "),a("p",[s._v("注意:  如果参数类型不是数值，"),a("code",[s._v("Number.isFinite")]),s._v("一律返回"),a("code",[s._v("false")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFinite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// trueNumber.isFinite(0.8); // trueNumber.isFinite(NaN); // falseNumber.isFinite(Infinity); // falseNumber.isFinite(-Infinity); // falseNumber.isFinite('foo'); // falseNumber.isFinite('15'); // falseNumber.isFinite(true); // false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Num.isNaN:  判断一个数值是否为NaN, 如果参数类型不是"),a("code",[s._v("NaN")]),s._v("，"),a("code",[s._v("Number.isNaN")]),s._v("一律返回"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// trueNumber.isNaN(15) // falseNumber.isNaN('15') // falseNumber.isNaN(true) // falseNumber.isNaN(9/NaN) // trueNumber.isNaN('true' / 0) // trueNumber.isNaN('true' / 'true') // true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_3-数组的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组的扩展"}},[s._v("#")]),s._v(" 3.数组的扩展")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("includes()方法:  用来代替以前es5中indexOf()方法;")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("includes比indexOf更具语义化,")])]),s._v(" "),a("li",[a("p",[s._v("indexOf不能对NaN具有有效的判断")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。[NaN].indexOf(NaN)// -1[NaN].includes(NaN)// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("Array.from():  用来将类数组转换为正真的数组")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Array.from,用来将类数组转换为真正的数组,(key值必须是下标(可以不用加引号),必须有length这个属性值,length是多少,转换完就会显示多少个元素)var obj = {    'name': \"张三\",    'age': 13,    'sex': '男',    '1': '中国',    length: 4}var arr = Array.from(obj);console.log(arr);//(4)[undefined, \"中国\", undefined, undefined]var obj = {    '0': \"张三\",     1: '13',    '2': '男',    '3': '中国',    length: 2}var arr2 = Array.from(obj);console.log(arr2);//(2) [\"张三\", \"13\"]let arrayLike = {    '0': 'a',    '1': 'b',    '2': 'c',    length: 3};// ES5的写法var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']// ES6的写法let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_4-对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-对象的扩展"}},[s._v("#")]),s._v(" 4.对象的扩展")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("对象属性名和方法简写")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//关键字声明函数 // 语法：function 函数名(){代码块}}//字面量声明函数//语法：var fn = function(){}//函数写在对象外边,方法写在对象里面,函数不能简写,方法可以简写// let student = {//     name:'张三',//     age:25,//     address:\"中国\"// }// console.log(student);//简写后的name或age,有俩重含义:1.表示属性名,2.表示属性值let name = '张三';let age = 14;let address = '中国';let student = {    name,//简写    age,//简写    address: address,//不简写    //没有简写的方法    sayHi: function () {        console.log(this.name);//张三        return student;    },    //简写后的方法    fn() {        console.log(this.address);//中国    }}console.log(student.name);//14console.log(student.sayHi());//{name: \"张三\", age: 14, address: \"中国\", sayHi: ƒ, fn: ƒ}console.log(student.fn());//undefined,以为方法没有return//小结: 对象属性名可以对常规的类型数据简写,也可以对方法进行简写(不用function声明)")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("对象属性名表达式")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//要求生成一个这样的数据:\t{A:[],B:[],C:[]...Z[]}let obj = {}for (let i = 0; i < 26; i++) {      // 65表示A,遍历26次就是A~Z    let char = String.fromCharCode(65 + i);//将十进制ascii码转换为相应的字符    //console.log(char);//A~Z    // obj.char=[]//{char: []}  //常规对象的属性名都是字符串,现在是字符串,表达式和字符串俩回事,就相当于var obj={'char':[]}    obj[char] = [];//对象属性名表达式 ,//这种的就是表达式了,这个char就是变量了,obj={A:[],B:[],C:[]....Z:[]}}console.log(obj);//{A: Array(0), B: Array(0), C: Array(0), D: Array(0), E: Array(0), …}//对象的属性名默认为字符串,形式如下:let student = {};student.name = '张三';//字符串形式student['age'] = 18;//字符串形式console.log(student);//{name: \"张三\", age: 18}//对象属性名表达式写法://student[表达式]student[1 > 1] = '2';console.log(student);// // 关于中括号的操作:// var obj1 = {//     xingming: '李四',// }// // 中括号操作属性:// // 当你的属性赋值给一个变量的时候，这个时候，就需要选择使用中括号// var name = 'xingming';//把姓名这个属性赋值给name这个变量,// console.log(obj1[name]);//对象中括号,中括号里写变量,这样也能到用到obj1里面的xingming属性// obj1['age'] = 13;//对象属性名默认为字符串,所以age加引号,上面的name是属性名赋值的变量,所以不加引号// console.log(obj1);//{xingming: \"李四\", age: 13}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_5-函数的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数的扩展"}},[s._v("#")]),s._v(" 5.函数的扩展")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("形参默认值")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//形参默认值,传统做法// function student(name,age) {//     //利用||或运算符的短路情况(俩个满足一个情况就为true)//     age = age || 23;//第一个age为undefined,23为ture,走23,如果实参传过来,age就有值了,有值就不往后走了,所以就走实参了//     console.log(name,age);// }// // student('张三',19);//张三 19// student();//undefined 23//思考:  想让name走默认值,然后只给age赋值,是否能做到?function fn(name='李四',age=18){    console.log(name,age);}   fn();//李四 18// function fn({name='李四',age=18}){//     console.log(name,age);// }   // fn({age:23});//李四 23")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("rest参数")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("剩余参数运算符一定要出现在形参列表最后,否则报错")])]),s._v(" "),a("li",[a("p",[s._v("如果没有剩余参数,则他的默认值是空数组[]")])]),s._v(" "),a("li",[a("p",[s._v("它用在函数形参列表中的表现形式为 ...")])])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //es5中的做法// function fn(){//     console.log(arguments.length);//5 //arguments接收实参列表,不管形参有没有定义,arguments都能接收//     console.log(arguments[2]);//3// }// fn(1,2,3,4,5)//es6中箭头函数不再支持arguments,es6提出了rest剩余参数运算符的做法function num(...args){    console.log(args);//6) [1, 2, 3, 4, 5, 6]}num(1,2,3,4,5,6);//rest运算符的表现形式为...;剩余参数运算符只能出现在形参列表的最后面//错误范例:// function fn(...agrs,a,b){//     console.log(agrs);//报错 Rest parameter must be last formal parameter //剩余参数必须是最后一个形式参数// }// fn(1,2,3,4,5)//fn方法一共定义了三个参数:a,b,agrsfunction fn(a,b,...agrs){    console.log(a);//1 //undefined    console.log(b);//2 //undefined    console.log(agrs);//(3) [3, 4, 5] //[]}// fn(1,2,3,4,5);// fn()/*小结:       1. 剩余参数运算符一定要出现在形参列表最后,否则报错      2. 如果没有剩余参数,则他的默认值是空数组[]       3. 它用在函数形参列表中的表现形式为 ... */")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[s._v("箭头函数")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("箭头函数,常常用来替代 '字面量声明函数';箭头函数的写法不影响调用")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //三种函数形式// function fn(){}//关键字声明函数// let fn1 = function(){}//字面量声明函数// let fn2 = new Function();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("箭头函数的基本语法()=>{};")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'形参'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//函数体    console.log('hello');}fn();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("以箭头为分割,箭头左边为形参列表,箭头右边为函数体")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("形参列表: 如果有一个形参则可以省略形参列表的圆括号,否则没有形参或多个形参的情况都不可以省略圆括号")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//没有形参的情况// var fn = () => {//     console.log('hello');// }// fn();//有一个形参的情况,形参的括号可以省略// var fn = msg => {//     console.log(msg);//hello// };// fn('hello');//多个形参的情况// var fn = (x,y)=>{//     console.log(x,y);//hello world// }// fn('hello','world')")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("函数体: 如果箭头右边不写{},默认会返回右边的语句,如下:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("msg")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//hello")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果要返回的数据是对象,这种情况会造成歧义:  "),a("strong",[s._v("箭头函数会把对象的{},解析为函数{}")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对象才冒号,语句块和函数内部用的都是等于号var fn = () => { name: '张三',age: 13}//报错,意外的:号,解析为函数应该用=号")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("解决方法:  "),a("strong",[s._v("加一个()圆括号构成一个表达式,消除歧义")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//{name: "张三", age: 13}')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("箭头函数的this指向")]),s._v(" "),a("ul",[a("li",[s._v("常规函数this指向当前调用者,箭头函数内容的this不绑定当前调用者,也就是说箭头函数内this与调用者无关; 只与箭头函数的定义环境(上下文)有关(箭头函数所处的当前作用域内的this是谁,箭头函数内的this就是谁)")])])]),s._v(" "),a("li",[a("p",[s._v("箭头函数的不适用场景")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("对象里的方法不适用于箭头函数声明")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" title "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'函数外'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    title"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'函数内'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//fn为箭头函数的使用:obj.fn();//对象不构成单独作用域(不要把对象的{},理解为块作用域),此时fn箭头函数的上下文环境为obj的环境,也就是window,obj的环境是什么fn的this就是什么,所以输出: 函数外")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("事件绑定的回调函数,不适合是用箭头函数")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" button "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'press'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("button"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toggle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'on'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这个this,指向了window了,而不是button});")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("箭头函数有几个使用注意点:")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("函数体内的"),a("code",[s._v("this")]),s._v("对象，就是定义时所在的对象，而不是使用时所在的对象。")])]),s._v(" "),a("li",[a("p",[s._v("不可以当作构造函数，也就是说，不可以使用"),a("code",[s._v("new")]),s._v("命令，否则会抛出一个错误。")])]),s._v(" "),a("li",[a("p",[s._v("不可以使用"),a("code",[s._v("arguments")]),s._v("对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。")])]),s._v(" "),a("li",[a("p",[s._v("不可以使用"),a("code",[s._v("yield")]),s._v("命令，因此箭头函数不能用作 Generator 函数。")])]),s._v(" "),a("li",[a("p",[s._v("箭头函数没有原型属性")])]),s._v(" "),a("li",[a("p",[s._v("不绑定顶层对象,不会绑定到window上")])])])])])])])]),s._v(" "),a("li",[a("p",[s._v("name属性")]),s._v(" "),a("ul",[a("li",[s._v("函数的"),a("code",[s._v("name")]),s._v("属性，返回该函数的函数名。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "foo"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"_4-symbol-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-symbol-了解"}},[s._v("#")]),s._v(" 4. Symbol(了解)")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("- symbol类型是es6提出的第七种数据类型,目前一共有:**String,Number,Boolean,Undefined,Null,Object,Symbol, BigInt (大整数,es6数值的扩展有介绍)**- symbol的作用是:  产生一个独一无二的值,也就是说symbol产生的值,是symbol类型的,不会和任何一个值相等,包括同样是symbol的另外一个值。\n")])])]),a("ul",[a("li",[a("p",[s._v("symbol值的表现形式:  不是字符串,也不是加密数字。")])]),s._v(" "),a("li",[a("p",[s._v("symbol的作用:")]),s._v(" "),a("ol",[a("li",[s._v("防止对象属性被覆盖")]),s._v(" "),a("li",[s._v("模拟es6  class的私有")])])])]),s._v(" "),a("h2",{attrs:{id:"_5-set和map和扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-set和map和扩展运算符"}},[s._v("#")]),s._v(" 5. Set和Map和扩展运算符")]),s._v(" "),a("ul",[a("li",[s._v("在es5中集合类型有数组和对象,es6又新增了Set和Map俩种集合数据类型,现在一共有四种集合类型:       Object,  Array,  Set,  Map")])]),s._v(" "),a("h3",{attrs:{id:"_1-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-set"}},[s._v("#")]),s._v(" 1.Set")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("set集合与Array数组比较相似,它的常用属性和方法如下:")]),s._v(" "),a("ul",[a("li",[s._v("size属性:  类似于数组中的length, 都是用来查看数据中的长度")]),s._v(" "),a("li",[s._v("add()方法:  类似于数组中的push(), 用来给set添加元素的")]),s._v(" "),a("li",[s._v("delete()方法:  类似数组中的pop(), 用来删除set中指定的元素")]),s._v(" "),a("li",[s._v("has()方法:  类似数组中的includes(), 用来判断set里面是否有指定的元素,如果有返回true,没有的话就返回false")]),s._v(" "),a("li",[s._v("clear()方法:  清除所有set内的元素")]),s._v(" "),a("li",[s._v("forEach()方法:  用来遍历set里的元素,set不能通过下标来获取元素,只能通过遍历来获取数据,不能通过for循环来遍历,因为set集合没有下标。")])])]),s._v(" "),a("li",[a("p",[s._v("作用:  用来清除数组中的重复数据。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//set去重,自己的var arr = [1,2,2,1,3,4,6,4,5,]// arr.map((item)=>{//     set.add(item);// })// console.log(arr);// console.log(set);//更简单的,老师的// let set1 = new Set(arr);//通过Set去重// console.log(set1);//Set(6) {1, 2, 3, 4, 6, …}// var arr1 = [...set1]//转换为了数组// console.log(arr1);//(6) [1, 2, 3, 4, 6, 5]// 再精简var arr1 = [...new Set(arr)]//把上面的直接变成一句话console.log(arr1);//(6) [1, 2, 3, 4, 6, 5]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-spread和rest运算符-位置-3-5-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-spread和rest运算符-位置-3-5-2"}},[s._v("#")]),s._v(" 2.spread和rest运算符(位置: 3>5>2)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//...在es6中是一个运算符,它有俩种含义: 一是:剩余参数运算符(rest), 二是:扩展运算符(spread)//1.剩余参数运算符(rest): 出现在函数的形参列表末尾叫做剩余参数运算符// function fn(...args){//     console.log(args);// }// fn(1,2,3,4,5,6,7,8,9);//2.扩展运算符(spread): 一般用于展开对象或数组(集合)里面的内容//展开数组: 能够用来进行数组的内容复制// let arr = [1,2,3];// // console.log(arr);//(3) [1, 2, 3]// // console.log(...arr);//1 2 3,数组展开// // let arr1 = ...arr;//报错意外的...// let arr1 = [...arr];//数组复制,把1,2,3放到一个数组里,然后赋值给了arr1// console.log(arr1);// //2.展开对象: 能够复制对象里面的内容// let student = { name: \'张三\', age: 15, sex: \'男\' }// let info = { title: \'标题\', content: "内容" }// let obj = {//     ...student, //     info//{name: "张三", age: 15, sex: "男", info: {…}}//     // ...info//{name: "张三", age: 15, sex: "男", title: "标题", content: "内容"}//     //...info和数组中的comcat()合并方法效果差不多合并成一维数组,一维对象; info和数组的push()效果差不多,是二维的对象,二维数组// };// console.log(obj);// console.log(student);//3.展开Set,用来过滤重复数组内容let arr = [1,1,2,2,3,3,4,5,4,5]let set = [...new Set(arr)];//把set展开,用数组包起来,然后赋值到set,结果就变成数组了console.log(set);//[1, 2, 3, 4, 5]//用扩展运算符做数组合并var a = [1,2,3];var b = [4,5,6];var c = [...a,...b];console.log(c);//[1, 2, 3, 4, 5, 6] //扩展运算符也可以做数组合并a.push(8)console.log(a);//[1, 2, 3, 8]console.log(c);//[1, 2, 3, 4, 5, 6]//扩展运输符是深拷贝还是浅拷贝//浅拷贝')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_3-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-map"}},[s._v("#")]),s._v(" 3.Map")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("map集合和object对象比较相似,他的常用属性和方法如下:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("size属性:用来检测map集合中数据的长度,类似于数组中的length  如: map.size")])]),s._v(" "),a("li",[a("p",[s._v("set()方法: 用来添加和修改map集合里的数据; 设置key,value    如:  map.set('name','张三')")])]),s._v(" "),a("li",[a("p",[s._v("get()方法: 用来获取map集合里的value值; 根据key,获取value         如:   map.get('name')//张三")])]),s._v(" "),a("li",[a("p",[s._v("delete()方法: 用来删除map集合里某个数据      如: map.delete('name')")])]),s._v(" "),a("li",[a("p",[s._v("has()方法: 用来查看map集合里是否有每个数据; 根据key,判断是否存在该value  如:map.has('name')//false")])]),s._v(" "),a("li",[a("p",[s._v("clear()方法: 清除map里的所有数据      如:map.clear()//Map(0) {}")])]),s._v(" "),a("li",[a("p",[s._v("forEach()方法: 用来遍历map集合里所有的vlue值")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//Map(3) {Array(3) => "数组", {…} => "对象", Array(3) => "修改后的数组"}//forEach遍历,把map里的value拿出来map.forEach(item=>{    console.log(item);//打印的都是vlue值    //打印:     //     数组    //     对象    //     修改后的数组})')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("map特点:")]),s._v(" "),a("ul",[a("li",[s._v("map相比对象类型,map的属性名(key)可以是对象等任意类型,object对象类型的属性目前只能是字符串或symbol")])])]),s._v(" "),a("li",[a("p",[s._v("map作用:")]),s._v(" "),a("ul",[a("li",[s._v("把dom对象以key的形式存储到map中的,给该key赋值;用来在dom上存储一下自定义数据。")])])])]),s._v(" "),a("h2",{attrs:{id:"_6-iterator-迭代器或遍历器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-iterator-迭代器或遍历器"}},[s._v("#")]),s._v(" 6.iterator(迭代器或遍历器)")]),s._v(" "),a("h3",{attrs:{id:"_1-iterator的概念和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-iterator的概念和使用"}},[s._v("#")]),s._v(" 1.iterator的概念和使用:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("iterator的作用:")]),s._v(" "),a("ul",[a("li",[s._v("用来提供一种统一的接口机制,来遍历不同的数据结构")])])]),s._v(" "),a("li",[a("p",[s._v("iterator用来遍历集合类型, 我们现在了解到的集合类型有: Array,Object,Set,Map")]),s._v(" "),a("ul",[a("li",[s._v("Array,Set和Map可以使用forEach来遍历,因为它们默认有了iterator接口")]),s._v(" "),a("li",[s._v("Object可以使用for in来遍历")])])]),s._v(" "),a("li",[a("p",[s._v("这四种集合类型的遍历方式不同,然后当他们相互组合的时候,会产生各种变化的数据类型: 比如数组包对象,对象又包set等操作,这种操作下的遍历就更加难以统一。")])]),s._v(" "),a("li",[a("p",[s._v("实际使用的时候,需要在数据结构上部署默认的iterator接口;然后再通过next()的调用来使用; 如下:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//Array,Set,Map默认都具备iterator接口,默认接口叫Symbol.iterator;Oject(对象)没有这个接口//我们以对象为例,来给对象部署默认iterator接口let obj = { name: \'张三\', age: 19, sex: "男" };//部署默认接口Symbol.iterator: 用来访问不同的数据结构,真正实现iterator的功效obj[Symbol.iterator] = function () {    // console.log(this);//this就代表obj//{name: "张三", age: 19, sex: "男", Symbol(Symbol.iterator): ƒ}    let index = 0;//记录下标    let keys = Object.keys(this);///Object.keys()可以获取对象里的所有key值,并且获取到的key值都放到了一个数组当中    // console.log(keys);//["name", "age", "sex"]    return {        next: () => { //1. 因为next上的方法把tis改变了,相当于没有获取到obj,所以结果shiundefined            //2. 解决方法: 把next的函数写出箭头函数,箭头函数的this还是外面obj的this            // console.log(this);//{next: ƒ}next上的函数把tis改变了            if (index < keys.length) {                return { value: this[keys[index++]], done: false };            } else {                return { value: undefined, done: true };            }        }    }}console.log(obj);//{name: "张三", age: 19, sex: "男", Symbol(Symbol.iterator): ƒ}console.log(obj[Symbol.iterator]());//{next: ƒ},相当于上个文件中的make()方法//访问默认接口的内容let iterator = obj[Symbol.iterator]();console.log(iterator.next());//{value: "张三", done: false}console.log(iterator.next());//{value: 19, done: false}console.log(iterator.next());//{value: "男", done: false}console.log(iterator.next());//{value: undefined, done: true}')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-for-of的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-for-of的使用"}},[s._v("#")]),s._v(" 2.for of的使用:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("for of是iterator的语法糖,所以部署了iterator接口的数据集合都可以使用for of遍历")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//原生具备 Iterator 接口的数据结构如下。//Array//Map//Set//String//TypedArray//函数的 arguments 对象//NodeList 对象")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("for of相比forEach和for in的优势在哪里?")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("forEach")]),s._v("无法中途跳出"),a("code",[s._v("forEach")]),s._v("循环，"),a("code",[s._v("break")]),s._v("命令或"),a("code",[s._v("return")]),s._v("命令都不能奏效。")]),s._v(" "),a("li",[s._v("数组的键名(下标)是数字，但是"),a("code",[s._v("for...in")]),s._v("循环是以字符串作为键名“0”、“1”、“2”等等。")]),s._v(" "),a("li",[a("code",[s._v("for...in")]),s._v("循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。不安全")]),s._v(" "),a("li",[s._v("某些情况下，"),a("code",[s._v("for...in")]),s._v("循环会以任意顺序遍历键名。")]),s._v(" "),a("li",[s._v("总之，"),a("code",[s._v("for...in")]),s._v("循环主要是为遍历对象而设计的，不适用于遍历数组。")])])]),s._v(" "),a("li",[a("p",[s._v("for of优势:")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("有着同"),a("code",[s._v("for...in")]),s._v("一样的简洁语法，但是没有"),a("code",[s._v("for...in")]),s._v("那些缺点。")])]),s._v(" "),a("li",[a("p",[s._v("不同于"),a("code",[s._v("forEach")]),s._v("方法，它可以与"),a("code",[s._v("break")]),s._v("、"),a("code",[s._v("continue")]),s._v("和"),a("code",[s._v("return")]),s._v("配合使用。")])]),s._v(" "),a("li",[a("p",[s._v("提供了遍历所有数据结构的统一操作接口。")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//下面是一个使用 break 语句，跳出for...of循环的例子。for (var n of fibonacci) {  if (n > 1000)    break;  console.log(n);}//上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用break语句跳出for...of循环。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("总结: for of适合遍历数组,  for in适合遍历对象")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//for of 用来遍历部署了iterator接口的数据集合let arr = [1,2,3,4,5,5,5,6]let set = new Set(arr);//set()里面可以传入iterable,iterable:可枚举,可遍历的东西,部署了iterator接口的就可以遍历let str = 'hello world';let map = new Map();map.set('name','张三');map.set('age',18);map.set('sex','男');// console.log(map);//{\"name\" => \"张三\", \"age\" => 18, \"sex\" => \"男\"}//遍历数组for of  ; 遍历对象 for in// for(let item of arr){//     console.log(item);//     // 1//     // 2//     // 3//     // 4//     // 5//     // 5//     // 5//     // 6// }// //遍历map// for(let index of map){//     console.log(index);//     //[\"name\", \"张三\"]//     // [\"age\", 18]//     // [\"age\", 18]// }// console.log(map.get('age'));//18//遍历set// for(let item of set){//     console.log(item);//     //1//     //2//     //3//     //4//     //5//     //6// }//错误的范例:let obj = {name:'张三',age:19,sex:'男'}for(let value of obj){    console.log(value);//报错,obj is not iterable,//obj是不可以迭代的,因为对象内部默认没有部署iterator接口,除非向上一个文件手动给对象部署iterator接口,才可以遍历}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"_7-generator生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-generator生成器"}},[s._v("#")]),s._v(" 7.Generator生成器")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("generator是一个函数, 只不过这个函数的写法比较特殊,再function关键字和函数名之间有一个*号,这样就构成了一个generator生成器,他不是普通的函数,他的调用不会立即执行;调用返回一个iterator,每次调用next则执行一步直到调用结束。")])]),s._v(" "),a("li",[a("p",[s._v("generator的意义是什么?")]),s._v(" "),a("ul",[a("li",[s._v("generator内部是一个状态机(yield和return),可以使用next()的调用返回多次结果;也可以使用next传递参数给generator函数,来改变函数内部的执行逻辑")])])]),s._v(" "),a("li",[a("p",[s._v("generator内部支持yield表达式,通过调用next(),可以让generators内部的yield表达式执行; 调用一次,执行一次,需要注意的是yield表达式没有返回值(返回undefined); 所以下一步的执行需要上一步的结果的时候,可以使用next()传递参数,如下:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(first);//4    let second = yield Math.pow(first,2);//8    // console.log(second);//16    return Math.pow(second,2)//256}// let iterator = pow(2);// let {value:first} = iterator.next();//value是4// console.log(first);//4// let {value:second} = iterator.next(first);// console.log(second);//16// let {value: third } = iterator.next(second);// console.log(third);//256// console.log(iterator.next(third));// //此时使用for of不合适,因为没法传递参数// for(let iterator of pow(2)){//     console.log(iterator);// }//这个例子好理解:function* fn(arr){    console.log(arr);//(3) [1, 2, 3]    let a = yield 111;    console.log(a);//第一个yield返回值    let b = yield 222;    console.log(b);//undefined,必须让第三个next()传参,yield自己是没有参数的    let c = yield 333;    console.log(c);//第三个yield返回值}let arr = [1,2,3];let iterator = fn(arr);console.log(iterator.next());//{value: 111, done: false}console.log(iterator.next('第一个yield返回值'));//第二个next传入的参数,是第一个yield的返回值 //{value: 222, done: false}console.log(iterator.next());//{value: 333, done: false}console.log(iterator.next('第三个yield返回值'));//{value: undefined, done: true}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"_8-promise-承诺"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-promise-承诺"}},[s._v("#")]),s._v(" 8. promise(承诺)")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("promise用来解决异步数据的传递")])])]),s._v(" "),a("h3",{attrs:{id:"_1-promise的基础介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-promise的基础介绍"}},[s._v("#")]),s._v(" 1.promise的基础介绍")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("-  promise在执行过程中有三个状态:**pending**(程序执行中,没有结果);**fulfilled**(程序执行完毕,执行成功);**rejected**(程序执行完毕,执行失败)-  需要注意的是状态从pending到fulfilled或pending到rejected;这个过程是不可逆的;也就是说成功后不可能转成为失败,失败后也不可能再转为成功。\n")])])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\t//声明定义promise      \t1.Promise是一个构造函数: new Promise()            - 他的内部需要一个回调函数                -回调函数里面有俩个形参:resolve(成功),和reject(失败)*/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("调用resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("使promise的状态从pending转换为fulfilled"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用reject()方法,使promise的状态从pending转换为reject//这里所说的成功和失败是一种逻辑上的成功和失败,有开发者自行判断let p = new Promise((resolve,reject)=>{    //不一定是ajax,只要是异步执行的代码就行    $.ajax({        url: '地址',        data: {            参数: xxx,            参数: xxx        },        type: 'POST/GET',        success: function (str) { //成功回调函数            resolve(str);//调用resolve就调用下面的then()方法了,str这个形参就会传递到then()方法里的rst形参        },        error: function (err) { //失败回调函数            reject(err);//调用reject就执行下面的catch()方法了,err这个形参就传递到catch()方法里err形参了        }    });});//使用promise,使用的是p这个对象//on是用来监听事件的//then里面的回调函数为onfulfilled,catch里面的回调函数为onrejected;这俩个回调函数分别是fulfilled和rejected的事件监听函数;也就是说promise的执行状态从pending转为fulfilled的时候,onfulfilled事件监听函数就会执行(then就会执行);执行状态从pending转换到rejected的时候,onrejected事件监听函数就会执行(catch就会执行)p.then(rst=>{    console.log(rst);}).catch(err=>{    console.log(err);})")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CAdministrator%5CPictures%5C%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%5Ces6%5C1.promise%E4%BC%A0%E5%8F%82%E7%90%86%E8%A7%A3%E5%9B%BE.jpg",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"_2-promise的链式和then成功处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-promise的链式和then成功处理"}},[s._v("#")]),s._v(" 2.promise的链式和then成功处理:")]),s._v(" "),a("ul",[a("li",[s._v("promise对象的then()内部onfulfilled监听回调函数,可以有return返回值,该值存在俩种情况:\n"),a("ol",[a("li",[s._v("返回一个promise对象\n"),a("ul",[a("li",[s._v("如果返回一个promise对象,那么下一个then()的调用将由该promise的resolve触发")])])]),s._v(" "),a("li",[s._v("返回一个非promise对象的值\n"),a("ul",[a("li",[s._v("非promise对象的值会作为then内部的resolve参数传递给下一个then的事件回调函数")])])])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//封装一个定时器方法:function timer(msg) {    let p = new Promise((resolve, reject) => {        setTimeout(() => {            resolve(msg);        }, 1000)    });    return p;//promise对象返回给timer函数}//timer().then()的调用返回promise对象,所以才能进行链式操作/*then()内部的onfulfilled监听回调函数,可以有return返回值,该值存在俩种情况:            1.返回一个promise对象                - 如果返回一个promise对象,那么下一个then()的调用将由该promise的resolve触发            2.返回一个非promise对象的值                - 非promise对象的值会作为then内部的resolve参数传递给下一个then的事件回调函数        */// //1.then()内部回调函数返回非promise对象的情况:// timer() //timer函数因为有了promise对象了,所以可以.then//     .then((rst) => {//         console.log(rst);//成功//         return ; //函数默认没有返回值,就是undefined//     })//     .then((rst) => {//         console.log(rst);//undefined//         return '2';//     })//     .then((rst) => {//         console.log(rst);//2//         return '3';//     })//     .then((rst) => {//         console.log(rst);//3//     })//2.then()内部回调函数返回promise的情况:let msg = '1秒钟';timer(msg)    .then((rst)=>{    console.log(rst);//1秒钟    return timer('2秒钟');//- 如果返回一个promise对象,那么下一个then()的调用将由该promise的resolve触发})    .then((rst)=>{    console.log(rst);//2秒钟    return timer();\t//使用链式解决了回调地狱问题,但是不优雅})    .then((rst)=>{    console.log(rst);//undefined    return;})    .then((rst)=>{    console.log(rst);//undefined    return timer();})           ")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_3-promise的catch异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-promise的catch异常处理"}},[s._v("#")]),s._v(" 3.promise的catch异常处理")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("promise对象的then()方法可以处理onfulfilled和onrejected俩个事件监听回调,但是我们一般采用catch()方法来处理onrejected的监听回调,因为catch可以捕获部分程序异常;有利于程序的健壮性。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//也可以这样写,err但是没有.catch强大city().then((res,err)=>{    console.log(res);//(4) [{…}, {…}, {…}, {…}]    console.log(err);//undefined,因为走了成功,所以失败是undefined})")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("promise对象走的是catch()方法的话,如果return err则代码进入catch;如果return其他代码,比如:return new Error('我错了'),则进入.then()。一句话就是,如果返回err就会让下面的.catch()接收到,如果返回别的话,就会让.then()接收到")]),s._v(" "),a("ul",[a("li",[s._v("我们可以利用这一特性有效的,优雅的在async...await中处理promise的异常。相似功能的第三方处理类库可以参见await-to-js。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// //请求电影院:function cinema() {    let p = new Promise((resolve, reject) => {        $.ajax({            url: 'http://www.bestqingshan.top/movie/cinema.php',            // data: {            //     //参数: xxx,            //     //参数: xxx            // },            type: 'GET',            success: function (str) { //成功回调函数                resolve(str);            },            error: function (err) { //失败回调函数                reject(err);            }        });    })    return p;}let p = cinema().then(res => {    // console.log('123123');不走这里的123123,因为这里是失败的走的是reject    return res}).catch(err => {    // console.log('123123');//走到这个,成功打印123123    // console.log(err);    // return '哈哈'//非promise对象的值会作为then内部的resolve参数传递给下一个then的事件回调函数    return err; //1.这个catch把err(返回)抛出去了,如果返回一个err(错误),就会传到下一个err上,如果不返回错误就传到下面res了    // return new Error('我错了');//也会走成功})//上面代码是异常的,也就是说必然会进入catch环节,如果return err则下面的代码进入catch;如果return其他代码,比如:return new Error('我错了'),则进入.then()。//我们可以利用这一特性有效的,优雅的在async...await中处理promise的异常。相似功能的第三方处理类库可以参见await-to-js。p.then(res => {    console.log('成功:',res);//成功: 哈哈}).catch(err => {    console.log('失败:',err);//2.底下这个err接收到了})")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_4-promise-all-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-promise-all-方法"}},[s._v("#")]),s._v(" 4.Promise.all()方法")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Promise.all()的参数是一个Promise数组,then()的返回结果也是一个数组,数组内容打印的前后顺序与all数组参数的前后顺序有关")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("他要求里面是一个数组")])]),s._v(" "),a("li",[a("p",[s._v("数组当中就是一个promise对象")])]),s._v(" "),a("li",[a("p",[s._v("这个结果是一个数组返回,数组当中有俩个数据,分别是俩个promise执行结果")])])])]),s._v(" "),a("li",[a("p",[s._v("Promise.all()中的promise数组参数,但凡有一个执行失败,则所有的执行都失败;执行有一定的事物性,要么全成功,要么全失败")])]),s._v(" "),a("li",[a("p",[s._v("Promise.all()相比上面的常规操作,有一个好处,所有数据都请求回来后才能统一做处理,而不是各自处理各自的")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("          $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("              url"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'http://localhost:5000/1.json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("              type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("success")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成功回调函数                  resolve(str);              },              error: function (err) { //失败回调函数                  reject(err);              }          });      })      return p;  }    function second() {      let p = new Promise((resolve, reject) => {          $.ajax({              url: 'http://localhost:5000/2.json',              type: 'GET',              success: function (str) { //成功回调函数                  resolve(str);              },              error: function (err) { //失败回调函数                  reject(err);              }          });      })      return p;  }    //1.如果first()和second()需要顺序执行,比如:先获取first(),然后才能获取second();我们使用then()链式操作即可解决  //2.如果我们需要同时获取,我们可以使用Promise.all()来操作  // //1.常规方案:  // first().then((res) => {  //     console.log('first:',res);  // }).catch(err => {  //     console.log('first:',err);  // })  // second().then((res) => {  //     console.log('second:',res);  // }).catch(err => {  //     console.log('second:',err);  // })    //2.Promise.all()的操作:  //Promise.all()的参数是一个Promise数组,then()的返回结果也是一个数组,数组内容打印的前后顺序与all数组参数的前后顺序有关  //1.他要求里面是一个数组  //2.数组当中就是一个promise对象  //3.这个结果是一个数组返回,数组当中有俩个数据,分别是俩个promise执行结果  //Promise.all()中的promise数组参数,但凡有一个执行失败,则所有的执行都失败;执行有一定的事物性,要么全成功,要么全失败  //Promise.all()相比上面的常规操作,有一个好处,所有数据都请求回来后才能统一做处理,而不是各自处理各自的    Promise.all([first(), second()]).then(res => {      console.log(res);//(2) [{…}, {…}]  }).catch(err => {      console.log(err);  })  ")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("小结:callback和promise都是用来解决异步数据的传递问题的")]),s._v(" "),a("h2",{attrs:{id:"_9-async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-async-await"}},[s._v("#")]),s._v(" 9.async...await")]),s._v(" "),a("ul",[a("li",[s._v("async...await: 它是基于promise的generator语法糖;一般使用async...await来优化promise的使用")])]),s._v(" "),a("h3",{attrs:{id:"_1-async"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-async"}},[s._v("#")]),s._v(" 1.async")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("async是用来修饰函数的,可以单独使用")])]),s._v(" "),a("li",[a("p",[s._v("修饰后的函数,变成了异步函数;这个函数调用后会返回一个promise对象")])]),s._v(" "),a("li",[a("p",[s._v("该函数内部return的结果,会作为函数调用promise对象的fulfilled(成功)结果")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Promise对象fn().then(res=>{    console.log(res);//hello world}).catch(err=>{    console.log(err);})")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-await"}},[s._v("#")]),s._v(" 2.await")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("-  await:是等待的意思,一般是等待异步执行的结果,同步也可以但是毫无意义\n")])])]),a("ol",[a("li",[a("p",[s._v("await必须要出现在async修饰的方法中,否则会报错;也就是说await不能单独使用")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("callFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1    let result = await first();//await is only valid in async functions and the top level bodies of modules//await只能在async方法中使用中使用    console.log(result);//Object    console.log('2');//2}callFirst();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("await用来等待一个方法的执行;该方法可以是同步的方法也可以是promise;一般用来等待promise的执行")])]),s._v(" "),a("li",[a("p",[s._v("通过使用async...await可以让以前的then()或者catch()回调函数形式,变为同步的做法")])]),s._v(" "),a("li",[a("p",[s._v("await等待的是promise的resolve结果,如果promise的结果是reject;await会报错,他处理不了异常,需要借助try...catch或catch来捕获异常;")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//处理await的异常://1.给等待的promise加入catch()async function callFirst() {    let result = await first().catch(err => {        console.log(err);//hello    });//异步的等待    console.log(result);//undefined}callFirst();//2.使用try...catch(){}的方法async function callFirst() {    //在try里面写的代码是容易出现异常的,或者在某种条件下必然异常    try {//检测可能出现异常的代码,不写try就直接报错了,影响后面程序的运行        let result = await first();        console.log(result);//undefined,因为异常直接在catch里处理了,所以result是undefined    } catch (err) {//处理异常//捕获异常        console.log(err);//hello    }}callFirst();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("不管promise是成功还是失败,await都会等待异步处理,只有当异步有成功或失败的结果,才执行后续代码")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// async function callFirst() {//     let result = await first();//报错,//Uncaught (in promise) hello,捕获不了promise里的异常,需要借助try...catch或catch来捕获异常;//     console.log(result);//undefined// }// callFirst(")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_3-await-to-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-await-to-js"}},[s._v("#")]),s._v(" 3.await-to-js")]),s._v(" "),a("ul",[a("li",[s._v("更加优雅的处理await的异常")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("        $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("            url"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'http://localhost:5000/1.json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("            type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("success")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成功回调函数                resolve(str);            },            error: function (err) { //失败回调函数                reject(err);            }        });    })    return p;}function to(promise) {    return promise        .then(res => {        return [null,res];    })        .catch(err => {        return [err];    })}//备注:上述代码的then()和catch()都有return返回;下一次链式进入then()还是catch()?//\t这需要看return的内容是否有异常或是否有错误;比如:throw new Error('错误'),下一次会进入catch()async function callFirst() {    let [err,res] = await to(first());    console.log(err);    console.log(res);    if(err){        //处理异常    }else{        console.log(res);    }}callFirst();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_10-class-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-class-类"}},[s._v("#")]),s._v(" 10. class(类)")]),s._v(" "),a("h3",{attrs:{id:"_1-类的介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类的介绍"}},[s._v("#")]),s._v(" 1.类的介绍")]),s._v(" "),a("ul",[a("li",[s._v("什么是类?\n"),a("ul",[a("li",[s._v("类是一批具有相同属性和行为的事物的抽象。类的主要作用是描述属性和行为")])])]),s._v(" "),a("li",[s._v("什么是属性?\n"),a("ul",[a("li",[s._v("就是一些静态的值,比如英雄联盟或王者荣耀:里面的英雄我们可以认为是一个类,所有的英雄都有血量,攻击力,防御力,法力,这些都是英雄的属性。")])])]),s._v(" "),a("li",[s._v("什么是行为?\n"),a("ul",[a("li",[s._v("还拿王者荣耀来举例,比如:宫本武藏有血量,攻击力,防御力等属性,那么他使用1技能或2技能在攻击的时候,他的初始攻击力是属性值(攻击力);比如:人会说话和跑步,那么说话和跑步都是行为,说话是建立在属性嘴的基础上,跑步是建立在属性腿和脚的基础上,总体意思是,行为需要依赖属性而存在的。")])])]),s._v(" "),a("li",[s._v("属性在程序中的表现就是一些变量")]),s._v(" "),a("li",[s._v("行为在程序中的表现就是一些函数")]),s._v(" "),a("li",[s._v("所以,类当中应该有变量和函数,这样来看类是一种封装,封装是面向对象的三大特征之一,(面向对象的三大特征有:封装,继承,多态)")]),s._v(" "),a("li",[s._v("类和对象的关系?\n"),a("ul",[a("li",[s._v("对象是类的实例化,对象具备类所描述的属性和行为")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-成员变量和成员方法声明的语法问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-成员变量和成员方法声明的语法问题"}},[s._v("#")]),s._v(" 2.成员变量和成员方法声明的语法问题:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("最终能够工作的是对象;但是在程序中必须先声明定义一个类;")])]),s._v(" "),a("li",[a("p",[s._v("es6声明定义类使用class,比如我们定义一个Animal类")])]),s._v(" "),a("li",[a("p",[s._v("建议类的名字首字母大写")])]),s._v(" "),a("li",[a("p",[s._v("对象能够使用的属性和方法,我们叫做成员属性和成员方法;由于对象可以反复实例化;所以对象具备一份独立拷贝的属性和方法,不同对象的属性修改不会影响其他对象")])]),s._v(" "),a("li",[a("p",[s._v("成员变量的声明:")]),s._v(" "),a("ol",[a("li",[s._v("声明在类内的所有方法之外(也就是类的顶层);不要有var let const this等修饰(会报错)")]),s._v(" "),a("li",[s._v("成员方法:成员方法的写法和函数在对象中的简写一模一样;不要加function关键字,不要在方法结束后加逗号或分号")])])]),s._v(" "),a("li",[a("p",[s._v("注意:不要把成员变量当作全局变量来使用;成员变量使用的时候需要加this")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//错误写法    // age:19;    // this.age:19;    // var age = 19;    //正确的成员变量声明:    leg = '腿';    foot='脚';    walk(a){        console.log('走',a);    }    run(){              //this指当前调用的对象,比如猫调用就是猫,要是狗调用就是狗        console.log('跑',this.leg,this.foot);    }    jump(){        console.log('跳');    }}//猫对象let cat = new Animal();console.log(cat);cat.leg='断了';cat.walk('路');cat.run();console.log(cat.foot);//狗对象let dog = new Animal();dog.run();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_3-constructor构造方法的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-constructor构造方法的使用"}},[s._v("#")]),s._v(" 3.constructor构造方法的使用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("强调:在类内部的成员方法和成员变量的使用都需要this")])]),s._v(" "),a("li",[a("p",[s._v("constructor是构造函数,他是在new实例化的时候自动调用执行的,不用手动调用;构造函数的作用是初始化成员变量的或调用成员方法;构造方法不需要有return返回")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成员变量(成员属性)    engine='发动';    wheels;    engine='火箭';//成员变量重名也是会覆盖的    constructor(newEngine,newWheels){//构造函数接收        this.engine=newEngine;//初始化成员变量        this.wheels=newWheels;        this.run();//调用成员方法\t}    //成员方法    run() {        console.log('跑', this.engine);    }    //成员方法重名会覆盖    run() {        console.log('跳');    }}let car = new Car('发动机','轮胎');//构造函数传参console.log(car.engine);console.log(car.wheels);// car.engine = '发动机';// car.engine = '发动机';car.run();")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_4-静态和成员的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-静态和成员的区别"}},[s._v("#")]),s._v(" 4.静态和成员的区别")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("静态的就是类的,也就是说静态变量是类能够使用的变量,静态方法就是类能够使用的方法")])]),s._v(" "),a("li",[a("p",[s._v("成员的就是对象的;成员变量就是对象能够使用的变量;成员方法就是对象能够使用的方法")])]),s._v(" "),a("li",[a("p",[s._v("静态和成员的区别?")]),s._v(" "),a("p",[s._v("​    1. 静态属性和方法由类去调用,成员的属性和方法由对象来调用;不能交叉,否则报错")]),s._v(" "),a("p",[s._v("​    2.成员属性和方法都有一份属于自己的独立拷贝,静态属性和方法全局独一份")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//第一种静态写法:    static title = '汽车';    engine='发动机';    wheels='轮胎';    constructor(){}//构造函数对类来说是没用的,类都传不了值,对成员来说是有用的    run(){        console.log('跑');    }    static sayHi(){        console.log('滴滴');    }}// 第二种声明静态变量和方法的写法:Car.brand='品牌';//静态变量,因为使用类名弄的变量Car.sayHello=function(){//静态方法    console.log('你好');}// class Car{}// Identifier 'Car' has already been declared //Car已经被声明了,不能重复声明类//成员变量的方法和使用let car = new Car();// console.log(car.title); //undefined 对象调用静态属性undefined,获取不到// car.sayHi();//对象调用静态方法会报错, car.sayHi is not a function sayHi不是函数//静态属性和方法的使用:Car.title='卡车'console.log(Car.title);//头部 //类调用成员变量同样也是获取不到undefinedCar.sayHi();//滴滴 //类调用成员方法同样是报错run不是函数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_5-class的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-class的继承"}},[s._v("#")]),s._v(" 5.class的继承")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在es6中使用extends实现继承")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在es6中使用extends实现继承class  Animal{    static title = '动物';    type='肉食者';    sayHi(){        console.log('大叫一声');    }    static sayHello(){        console.log('哈喽');    }}class Cat extends Animal{ //猫继承动物    blcak='黑夜动物';}let cat = new Cat();//cat继承过来的属性console.log(cat.type);//肉食者cat.sayHi();//大叫一声console.log(Cat.title);//动物Cat.sayHello();//哈喽//cat自己的属性:console.log(cat.blcak);//黑夜动物")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_6-super用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-super用法"}},[s._v("#")]),s._v(" 6.super用法")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("super()方法:只能出现在有继承的子类constructor方法第一行,否则报错;用来初始化父类的constructor")])]),s._v(" "),a("li",[a("p",[s._v("super.对象:一般使用super对象的场景是,子类出现了覆盖父类同名方法和属性的做法;子类的对象就无法再使用父类的同名方法或属性了,但是子类可以通过super对象来调用父类被覆盖的属性和方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//体重    height;//身高    //不要期待使用contructor去声明变量,这不直观    constructor(newH, newW) {        // super();//报错, super' keyword unexpected here        this.height = newH;        this.weight = newW;    }    sayHi(){        console.log('大叫一声');    }}class Cat extends Animal {    eyes;//眼睛    mouse;//嘴    color;    constructor(eyes,mouse,color,newH, newW){//super()初始化父类构造函数的        super(newH, newW);//super方法会调用父类的constructor构造方法,用来初始化父类的参数        this.eyes=eyes;        this.mouse=mouse;        this.color=color;    }    jump(){                  // super.sayHi();//super可以在子类方法中调用父类方法        console.log('跳到高');    }    //这种子类覆盖父类的写法是因为父类的方法不能满足子类的需求;覆盖后子类对象无法再调用父类的同名方法    sayHi(){        // super.sayHi();//使用super可以继续调用,和父类同名的方法        console.log('喵喵叫');    }}let cat = new Cat('蓝色眼睛','小小嘴','小花猫','30cm','10kg');console.log(cat);cat.sayHi();//大叫一声cat.jump();//跳到高")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);